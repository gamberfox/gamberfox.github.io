"use strict";
let state1 = [
    [[1, 8], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
    [[2, 2], [0, 0], [1, 9], [2, 2], [1, 4], [3, 0], [0, 0], [1, 10]],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
    [[0, 0], [4, 0], [1, 5], [1, 6], [0, 0], [0, 0], [0, 0], [0, 0]],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 2], [0, 0]],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 7], [0, 0], [1, 1]],
    [[0, 0], [2, 2], [0, 0], [0, 0], [0, 0], [0, 0], [2, 2], [1, 3]]
];
let pos1 = [[2, 5], [4, 1]];
let state2 = [
    [[2, 2], [2, 2], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 6]],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
    [[0, 0], [0, 0], [0, 0], [3, 0], [1, 5], [1, 7], [1, 4], [1, 2]],
    [[0, 0], [1, 1], [0, 0], [1, 3], [0, 0], [2, 2], [1, 8], [1, 2]],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
    [[0, 0], [0, 0], [0, 0], [1, 9], [0, 0], [1, 10], [0, 0], [0, 0]],
    [[0, 0], [0, 0], [0, 0], [4, 0], [0, 0], [2, 2], [0, 0], [0, 0]],
];
let state3 = [
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 3], [0, 0], [4, 0]],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
    [[0, 0], [0, 0], [0, 0], [3, 0], [1, 5], [1, 7], [1, 4], [1, 2]],
    [[0, 0], [1, 1], [0, 0], [1, 3], [0, 0], [2, 2], [1, 8], [1, 2]],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
    [[0, 0], [0, 0], [0, 0], [1, 9], [0, 0], [1, 10], [0, 0], [0, 0]],
    [[0, 0], [0, 0], [0, 0], [4, 0], [0, 0], [2, 2], [0, 0], [0, 0]],
];
let state5 = [
    [[1, 4], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 8],],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],],
    [[0, 0], [0, 0], [1, 1], [0, 0], [0, 0], [1, 10], [0, 0], [4, 0],],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 6], [0, 0], [2, 2],],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [2, 2], [2, 2],],
    [[0, 0], [0, 0], [0, 0], [0, 0], [2, 2], [1, 2], [0, 0], [1, 3],],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],],
    [[0, 0], [0, 0], [3, 0], [1, 7], [0, 0], [1, 9], [0, 0], [1, 5],],
];
let pos5 = [[7, 2], [2, 7]];
let s6 = [[
        [1, 9], [0, 0], [0, 0], [1, 8], [0, 0], [0, 0], [0, 0], [0, 0],
    ],
    [[0, 0], [1, 7], [0, 0], [0, 0], [1, 6], [3, 0], [0, 0], [1, 1],],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 2], [0, 0],],
    [[1, 10], [2, 2], [0, 0], [0, 0], [0, 0], [0, 0], [2, 2], [0, 0],],
    [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],],
    [[0, 0], [1, 4], [0, 0], [0, 0], [0, 0], [1, 3], [0, 0], [0, 0],],
    [[0, 0], [2, 2], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],],
    [[1, 5], [0, 0], [0, 0], [0, 0], [0, 0], [4, 0], [2, 2], [0, 0],],];
let pos6 = [[1, 5], [7, 5]];
let s10 = [[[1, 9], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 1],], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],], [[0, 0], [0, 0], [0, 0], [4, 0], [0, 0], [0, 0], [2, 2], [0, 0],], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],], [[0, 0], [3, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],], [[0, 0], [2, 2], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],], [[1, 5], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [2, 2], [0, 0],],];
let pos10 = [[5, 1], [3, 3]];
let b1;
function projectTest(times = 1, turnDepth = 20) {
    console.log(`you're doing a test with ${times} games played`);
    let player1Agent = parseInt(p1Agent.value);
    let player1Level = parseInt(p1Speed.value);
    let player2Agent = (player1Agent === 0) ? 1 : 0;
    let player2Level = parseInt(p2Speed.value);
    console.log(`p1 chosen agent: ${player1Agent + 1} | p1 agent level: ${player1Level}`);
    console.log(`p2 chosen agent: ${player2Agent + 1} | p2 agent level: ${player2Level}`);
    let result = [0, 0, 0];
    let totalMoves = 0;
    let gameEnded = false;
    let nextMove;
    for (let currentTest = 0; currentTest < times; currentTest++) {
        b1 = new Board();
        board1 = b1.clone();
        drawMap();
        gameEnded = false;
        totalMoves = 0;
        for (let i = 0; i < turnDepth; i++) {
            if (b1.player1Won || b1.player2Won || b1.tie) {
                gameEnded = true;
                if (b1.player1Won) {
                    result[0]++;
                }
                else if (b1.player2Won) {
                    result[1]++;
                }
                else if (b1.tie) {
                    result[2]++;
                }
                break;
            }
            nextMove = getNextMove(b1, player1Level, player1Agent);
            console.log(b1.tryToMove(nextMove));
            operationInProcess = false;
            totalMoves += 1;
            operationInProcess = true;
            if (b1.player1Won || b1.player2Won || b1.tie) {
                gameEnded = true;
                if (b1.player1Won) {
                    result[0]++;
                }
                else if (b1.player2Won) {
                    result[1]++;
                }
                else if (b1.tie) {
                    result[2]++;
                }
                break;
            }
            nextMove = getNextMove(b1, player2Level, player2Agent);
            console.log(b1.tryToMove(nextMove));
            operationInProcess = false;
            totalMoves += 1;
            drawMap();
        }
        board1 = b1.clone();
        drawMap();
        if (!gameEnded) {
            result[2]++;
        }
        console.log(`test ${currentTest} finished in ${totalMoves} turns`);
    }
    console.log(`p1 chosen agent: ${player1Agent + 1} | p1 agent level: ${player1Level}`);
    console.log(`p2 chosen agent: ${player2Agent + 1} | p2 agent level: ${player2Level}`);
    console.log(`p1 wins: ${result[0]} | p2 wins: ${result[1]} | ties: ${result[2]}`);
}
